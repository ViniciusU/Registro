
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Equipments
 * 
 */
export type Equipments = {
  id: string
  serial: string
  description: string
  batch: string
  model: string
  created_at: Date
}

/**
 * Model mischaracterize
 * 
 */
export type mischaracterize = {
  id: string
  equipment_id: string
  destination: string | null
  resourcesComplement: string
  state: string
  long: string
  lat: string
  updateDate: Date
}

/**
 * Model Imagens
 * 
 */
export type Imagens = {
  id: string
  image: string
  typed: string
  equipment_id: string
}

/**
 * Model Category
 * 
 */
export type Category = {
  id: string
  type: string
  model: string
}

/**
 * Model Admin
 * 
 */
export type Admin = {
  id: string
  username: string
  password: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Equipments
 * const equipments = await prisma.equipments.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Equipments
   * const equipments = await prisma.equipments.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.equipments`: Exposes CRUD operations for the **Equipments** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Equipments
    * const equipments = await prisma.equipments.findMany()
    * ```
    */
  get equipments(): Prisma.EquipmentsDelegate<GlobalReject>;

  /**
   * `prisma.mischaracterize`: Exposes CRUD operations for the **mischaracterize** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mischaracterizes
    * const mischaracterizes = await prisma.mischaracterize.findMany()
    * ```
    */
  get mischaracterize(): Prisma.mischaracterizeDelegate<GlobalReject>;

  /**
   * `prisma.imagens`: Exposes CRUD operations for the **Imagens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Imagens
    * const imagens = await prisma.imagens.findMany()
    * ```
    */
  get imagens(): Prisma.ImagensDelegate<GlobalReject>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<GlobalReject>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.0
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Equipments: 'Equipments',
    mischaracterize: 'mischaracterize',
    Imagens: 'Imagens',
    Category: 'Category',
    Admin: 'Admin'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EquipmentsCountOutputType
   */


  export type EquipmentsCountOutputType = {
    mischaracterize: number
    Imagens: number
  }

  export type EquipmentsCountOutputTypeSelect = {
    mischaracterize?: boolean
    Imagens?: boolean
  }

  export type EquipmentsCountOutputTypeGetPayload<S extends boolean | null | undefined | EquipmentsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EquipmentsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EquipmentsCountOutputTypeArgs)
    ? EquipmentsCountOutputType 
    : S extends { select: any } & (EquipmentsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EquipmentsCountOutputType ? EquipmentsCountOutputType[P] : never
  } 
      : EquipmentsCountOutputType




  // Custom InputTypes

  /**
   * EquipmentsCountOutputType without action
   */
  export type EquipmentsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EquipmentsCountOutputType
     * 
    **/
    select?: EquipmentsCountOutputTypeSelect | null
  }



  /**
   * Count Type CategoryCountOutputType
   */


  export type CategoryCountOutputType = {
    Equipments: number
  }

  export type CategoryCountOutputTypeSelect = {
    Equipments?: boolean
  }

  export type CategoryCountOutputTypeGetPayload<S extends boolean | null | undefined | CategoryCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? CategoryCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (CategoryCountOutputTypeArgs)
    ? CategoryCountOutputType 
    : S extends { select: any } & (CategoryCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof CategoryCountOutputType ? CategoryCountOutputType[P] : never
  } 
      : CategoryCountOutputType




  // Custom InputTypes

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     * 
    **/
    select?: CategoryCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Equipments
   */


  export type AggregateEquipments = {
    _count: EquipmentsCountAggregateOutputType | null
    _min: EquipmentsMinAggregateOutputType | null
    _max: EquipmentsMaxAggregateOutputType | null
  }

  export type EquipmentsMinAggregateOutputType = {
    id: string | null
    serial: string | null
    description: string | null
    batch: string | null
    model: string | null
    created_at: Date | null
  }

  export type EquipmentsMaxAggregateOutputType = {
    id: string | null
    serial: string | null
    description: string | null
    batch: string | null
    model: string | null
    created_at: Date | null
  }

  export type EquipmentsCountAggregateOutputType = {
    id: number
    serial: number
    description: number
    batch: number
    model: number
    created_at: number
    _all: number
  }


  export type EquipmentsMinAggregateInputType = {
    id?: true
    serial?: true
    description?: true
    batch?: true
    model?: true
    created_at?: true
  }

  export type EquipmentsMaxAggregateInputType = {
    id?: true
    serial?: true
    description?: true
    batch?: true
    model?: true
    created_at?: true
  }

  export type EquipmentsCountAggregateInputType = {
    id?: true
    serial?: true
    description?: true
    batch?: true
    model?: true
    created_at?: true
    _all?: true
  }

  export type EquipmentsAggregateArgs = {
    /**
     * Filter which Equipments to aggregate.
     * 
    **/
    where?: EquipmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipments to fetch.
     * 
    **/
    orderBy?: Enumerable<EquipmentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EquipmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Equipments
    **/
    _count?: true | EquipmentsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EquipmentsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EquipmentsMaxAggregateInputType
  }

  export type GetEquipmentsAggregateType<T extends EquipmentsAggregateArgs> = {
        [P in keyof T & keyof AggregateEquipments]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEquipments[P]>
      : GetScalarType<T[P], AggregateEquipments[P]>
  }




  export type EquipmentsGroupByArgs = {
    where?: EquipmentsWhereInput
    orderBy?: Enumerable<EquipmentsOrderByWithAggregationInput>
    by: Array<EquipmentsScalarFieldEnum>
    having?: EquipmentsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EquipmentsCountAggregateInputType | true
    _min?: EquipmentsMinAggregateInputType
    _max?: EquipmentsMaxAggregateInputType
  }


  export type EquipmentsGroupByOutputType = {
    id: string
    serial: string
    description: string
    batch: string
    model: string
    created_at: Date
    _count: EquipmentsCountAggregateOutputType | null
    _min: EquipmentsMinAggregateOutputType | null
    _max: EquipmentsMaxAggregateOutputType | null
  }

  type GetEquipmentsGroupByPayload<T extends EquipmentsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EquipmentsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EquipmentsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EquipmentsGroupByOutputType[P]>
            : GetScalarType<T[P], EquipmentsGroupByOutputType[P]>
        }
      >
    >


  export type EquipmentsSelect = {
    id?: boolean
    serial?: boolean
    description?: boolean
    batch?: boolean
    model?: boolean
    Category?: boolean | CategoryArgs
    mischaracterize?: boolean | EquipmentsMischaracterizeArgs
    Imagens?: boolean | EquipmentsImagensArgs
    created_at?: boolean
    _count?: boolean | EquipmentsCountOutputTypeArgs
  }


  export type EquipmentsInclude = {
    Category?: boolean | CategoryArgs
    mischaracterize?: boolean | EquipmentsMischaracterizeArgs
    Imagens?: boolean | EquipmentsImagensArgs
    _count?: boolean | EquipmentsCountOutputTypeArgs
  } 

  export type EquipmentsGetPayload<S extends boolean | null | undefined | EquipmentsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Equipments :
    S extends undefined ? never :
    S extends { include: any } & (EquipmentsArgs | EquipmentsFindManyArgs)
    ? Equipments  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Category' ? CategoryGetPayload<S['include'][P]> :
        P extends 'mischaracterize' ? Array < mischaracterizeGetPayload<S['include'][P]>>  :
        P extends 'Imagens' ? Array < ImagensGetPayload<S['include'][P]>>  :
        P extends '_count' ? EquipmentsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EquipmentsArgs | EquipmentsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Category' ? CategoryGetPayload<S['select'][P]> :
        P extends 'mischaracterize' ? Array < mischaracterizeGetPayload<S['select'][P]>>  :
        P extends 'Imagens' ? Array < ImagensGetPayload<S['select'][P]>>  :
        P extends '_count' ? EquipmentsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Equipments ? Equipments[P] : never
  } 
      : Equipments


  type EquipmentsCountArgs = Merge<
    Omit<EquipmentsFindManyArgs, 'select' | 'include'> & {
      select?: EquipmentsCountAggregateInputType | true
    }
  >

  export interface EquipmentsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Equipments that matches the filter.
     * @param {EquipmentsFindUniqueArgs} args - Arguments to find a Equipments
     * @example
     * // Get one Equipments
     * const equipments = await prisma.equipments.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EquipmentsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EquipmentsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Equipments'> extends True ? Prisma__EquipmentsClient<EquipmentsGetPayload<T>> : Prisma__EquipmentsClient<EquipmentsGetPayload<T> | null, null>

    /**
     * Find one Equipments that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EquipmentsFindUniqueOrThrowArgs} args - Arguments to find a Equipments
     * @example
     * // Get one Equipments
     * const equipments = await prisma.equipments.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EquipmentsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EquipmentsFindUniqueOrThrowArgs>
    ): Prisma__EquipmentsClient<EquipmentsGetPayload<T>>

    /**
     * Find the first Equipments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentsFindFirstArgs} args - Arguments to find a Equipments
     * @example
     * // Get one Equipments
     * const equipments = await prisma.equipments.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EquipmentsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EquipmentsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Equipments'> extends True ? Prisma__EquipmentsClient<EquipmentsGetPayload<T>> : Prisma__EquipmentsClient<EquipmentsGetPayload<T> | null, null>

    /**
     * Find the first Equipments that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentsFindFirstOrThrowArgs} args - Arguments to find a Equipments
     * @example
     * // Get one Equipments
     * const equipments = await prisma.equipments.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EquipmentsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EquipmentsFindFirstOrThrowArgs>
    ): Prisma__EquipmentsClient<EquipmentsGetPayload<T>>

    /**
     * Find zero or more Equipments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Equipments
     * const equipments = await prisma.equipments.findMany()
     * 
     * // Get first 10 Equipments
     * const equipments = await prisma.equipments.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const equipmentsWithIdOnly = await prisma.equipments.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EquipmentsFindManyArgs>(
      args?: SelectSubset<T, EquipmentsFindManyArgs>
    ): PrismaPromise<Array<EquipmentsGetPayload<T>>>

    /**
     * Create a Equipments.
     * @param {EquipmentsCreateArgs} args - Arguments to create a Equipments.
     * @example
     * // Create one Equipments
     * const Equipments = await prisma.equipments.create({
     *   data: {
     *     // ... data to create a Equipments
     *   }
     * })
     * 
    **/
    create<T extends EquipmentsCreateArgs>(
      args: SelectSubset<T, EquipmentsCreateArgs>
    ): Prisma__EquipmentsClient<EquipmentsGetPayload<T>>

    /**
     * Create many Equipments.
     *     @param {EquipmentsCreateManyArgs} args - Arguments to create many Equipments.
     *     @example
     *     // Create many Equipments
     *     const equipments = await prisma.equipments.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EquipmentsCreateManyArgs>(
      args?: SelectSubset<T, EquipmentsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Equipments.
     * @param {EquipmentsDeleteArgs} args - Arguments to delete one Equipments.
     * @example
     * // Delete one Equipments
     * const Equipments = await prisma.equipments.delete({
     *   where: {
     *     // ... filter to delete one Equipments
     *   }
     * })
     * 
    **/
    delete<T extends EquipmentsDeleteArgs>(
      args: SelectSubset<T, EquipmentsDeleteArgs>
    ): Prisma__EquipmentsClient<EquipmentsGetPayload<T>>

    /**
     * Update one Equipments.
     * @param {EquipmentsUpdateArgs} args - Arguments to update one Equipments.
     * @example
     * // Update one Equipments
     * const equipments = await prisma.equipments.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EquipmentsUpdateArgs>(
      args: SelectSubset<T, EquipmentsUpdateArgs>
    ): Prisma__EquipmentsClient<EquipmentsGetPayload<T>>

    /**
     * Delete zero or more Equipments.
     * @param {EquipmentsDeleteManyArgs} args - Arguments to filter Equipments to delete.
     * @example
     * // Delete a few Equipments
     * const { count } = await prisma.equipments.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EquipmentsDeleteManyArgs>(
      args?: SelectSubset<T, EquipmentsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Equipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Equipments
     * const equipments = await prisma.equipments.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EquipmentsUpdateManyArgs>(
      args: SelectSubset<T, EquipmentsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Equipments.
     * @param {EquipmentsUpsertArgs} args - Arguments to update or create a Equipments.
     * @example
     * // Update or create a Equipments
     * const equipments = await prisma.equipments.upsert({
     *   create: {
     *     // ... data to create a Equipments
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Equipments we want to update
     *   }
     * })
    **/
    upsert<T extends EquipmentsUpsertArgs>(
      args: SelectSubset<T, EquipmentsUpsertArgs>
    ): Prisma__EquipmentsClient<EquipmentsGetPayload<T>>

    /**
     * Count the number of Equipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentsCountArgs} args - Arguments to filter Equipments to count.
     * @example
     * // Count the number of Equipments
     * const count = await prisma.equipments.count({
     *   where: {
     *     // ... the filter for the Equipments we want to count
     *   }
     * })
    **/
    count<T extends EquipmentsCountArgs>(
      args?: Subset<T, EquipmentsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EquipmentsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Equipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EquipmentsAggregateArgs>(args: Subset<T, EquipmentsAggregateArgs>): PrismaPromise<GetEquipmentsAggregateType<T>>

    /**
     * Group by Equipments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EquipmentsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EquipmentsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EquipmentsGroupByArgs['orderBy'] }
        : { orderBy?: EquipmentsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EquipmentsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEquipmentsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Equipments.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EquipmentsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Category<T extends CategoryArgs= {}>(args?: Subset<T, CategoryArgs>): Prisma__CategoryClient<CategoryGetPayload<T> | Null>;

    mischaracterize<T extends EquipmentsMischaracterizeArgs= {}>(args?: Subset<T, EquipmentsMischaracterizeArgs>): PrismaPromise<Array<mischaracterizeGetPayload<T>>| Null>;

    Imagens<T extends EquipmentsImagensArgs= {}>(args?: Subset<T, EquipmentsImagensArgs>): PrismaPromise<Array<ImagensGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Equipments base type for findUnique actions
   */
  export type EquipmentsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
    /**
     * Filter, which Equipments to fetch.
     * 
    **/
    where: EquipmentsWhereUniqueInput
  }

  /**
   * Equipments findUnique
   */
  export interface EquipmentsFindUniqueArgs extends EquipmentsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Equipments findUniqueOrThrow
   */
  export type EquipmentsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
    /**
     * Filter, which Equipments to fetch.
     * 
    **/
    where: EquipmentsWhereUniqueInput
  }


  /**
   * Equipments base type for findFirst actions
   */
  export type EquipmentsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
    /**
     * Filter, which Equipments to fetch.
     * 
    **/
    where?: EquipmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipments to fetch.
     * 
    **/
    orderBy?: Enumerable<EquipmentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipments.
     * 
    **/
    cursor?: EquipmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipments.
     * 
    **/
    distinct?: Enumerable<EquipmentsScalarFieldEnum>
  }

  /**
   * Equipments findFirst
   */
  export interface EquipmentsFindFirstArgs extends EquipmentsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Equipments findFirstOrThrow
   */
  export type EquipmentsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
    /**
     * Filter, which Equipments to fetch.
     * 
    **/
    where?: EquipmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipments to fetch.
     * 
    **/
    orderBy?: Enumerable<EquipmentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Equipments.
     * 
    **/
    cursor?: EquipmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipments.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Equipments.
     * 
    **/
    distinct?: Enumerable<EquipmentsScalarFieldEnum>
  }


  /**
   * Equipments findMany
   */
  export type EquipmentsFindManyArgs = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
    /**
     * Filter, which Equipments to fetch.
     * 
    **/
    where?: EquipmentsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Equipments to fetch.
     * 
    **/
    orderBy?: Enumerable<EquipmentsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Equipments.
     * 
    **/
    cursor?: EquipmentsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Equipments from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Equipments.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EquipmentsScalarFieldEnum>
  }


  /**
   * Equipments create
   */
  export type EquipmentsCreateArgs = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
    /**
     * The data needed to create a Equipments.
     * 
    **/
    data: XOR<EquipmentsCreateInput, EquipmentsUncheckedCreateInput>
  }


  /**
   * Equipments createMany
   */
  export type EquipmentsCreateManyArgs = {
    /**
     * The data used to create many Equipments.
     * 
    **/
    data: Enumerable<EquipmentsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Equipments update
   */
  export type EquipmentsUpdateArgs = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
    /**
     * The data needed to update a Equipments.
     * 
    **/
    data: XOR<EquipmentsUpdateInput, EquipmentsUncheckedUpdateInput>
    /**
     * Choose, which Equipments to update.
     * 
    **/
    where: EquipmentsWhereUniqueInput
  }


  /**
   * Equipments updateMany
   */
  export type EquipmentsUpdateManyArgs = {
    /**
     * The data used to update Equipments.
     * 
    **/
    data: XOR<EquipmentsUpdateManyMutationInput, EquipmentsUncheckedUpdateManyInput>
    /**
     * Filter which Equipments to update
     * 
    **/
    where?: EquipmentsWhereInput
  }


  /**
   * Equipments upsert
   */
  export type EquipmentsUpsertArgs = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
    /**
     * The filter to search for the Equipments to update in case it exists.
     * 
    **/
    where: EquipmentsWhereUniqueInput
    /**
     * In case the Equipments found by the `where` argument doesn't exist, create a new Equipments with this data.
     * 
    **/
    create: XOR<EquipmentsCreateInput, EquipmentsUncheckedCreateInput>
    /**
     * In case the Equipments was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EquipmentsUpdateInput, EquipmentsUncheckedUpdateInput>
  }


  /**
   * Equipments delete
   */
  export type EquipmentsDeleteArgs = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
    /**
     * Filter which Equipments to delete.
     * 
    **/
    where: EquipmentsWhereUniqueInput
  }


  /**
   * Equipments deleteMany
   */
  export type EquipmentsDeleteManyArgs = {
    /**
     * Filter which Equipments to delete
     * 
    **/
    where?: EquipmentsWhereInput
  }


  /**
   * Equipments.mischaracterize
   */
  export type EquipmentsMischaracterizeArgs = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
    where?: mischaracterizeWhereInput
    orderBy?: Enumerable<mischaracterizeOrderByWithRelationInput>
    cursor?: mischaracterizeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<MischaracterizeScalarFieldEnum>
  }


  /**
   * Equipments.Imagens
   */
  export type EquipmentsImagensArgs = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
    where?: ImagensWhereInput
    orderBy?: Enumerable<ImagensOrderByWithRelationInput>
    cursor?: ImagensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ImagensScalarFieldEnum>
  }


  /**
   * Equipments without action
   */
  export type EquipmentsArgs = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
  }



  /**
   * Model mischaracterize
   */


  export type AggregateMischaracterize = {
    _count: MischaracterizeCountAggregateOutputType | null
    _min: MischaracterizeMinAggregateOutputType | null
    _max: MischaracterizeMaxAggregateOutputType | null
  }

  export type MischaracterizeMinAggregateOutputType = {
    id: string | null
    equipment_id: string | null
    destination: string | null
    resourcesComplement: string | null
    state: string | null
    long: string | null
    lat: string | null
    updateDate: Date | null
  }

  export type MischaracterizeMaxAggregateOutputType = {
    id: string | null
    equipment_id: string | null
    destination: string | null
    resourcesComplement: string | null
    state: string | null
    long: string | null
    lat: string | null
    updateDate: Date | null
  }

  export type MischaracterizeCountAggregateOutputType = {
    id: number
    equipment_id: number
    destination: number
    resourcesComplement: number
    state: number
    long: number
    lat: number
    updateDate: number
    _all: number
  }


  export type MischaracterizeMinAggregateInputType = {
    id?: true
    equipment_id?: true
    destination?: true
    resourcesComplement?: true
    state?: true
    long?: true
    lat?: true
    updateDate?: true
  }

  export type MischaracterizeMaxAggregateInputType = {
    id?: true
    equipment_id?: true
    destination?: true
    resourcesComplement?: true
    state?: true
    long?: true
    lat?: true
    updateDate?: true
  }

  export type MischaracterizeCountAggregateInputType = {
    id?: true
    equipment_id?: true
    destination?: true
    resourcesComplement?: true
    state?: true
    long?: true
    lat?: true
    updateDate?: true
    _all?: true
  }

  export type MischaracterizeAggregateArgs = {
    /**
     * Filter which mischaracterize to aggregate.
     * 
    **/
    where?: mischaracterizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mischaracterizes to fetch.
     * 
    **/
    orderBy?: Enumerable<mischaracterizeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: mischaracterizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mischaracterizes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mischaracterizes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned mischaracterizes
    **/
    _count?: true | MischaracterizeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MischaracterizeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MischaracterizeMaxAggregateInputType
  }

  export type GetMischaracterizeAggregateType<T extends MischaracterizeAggregateArgs> = {
        [P in keyof T & keyof AggregateMischaracterize]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMischaracterize[P]>
      : GetScalarType<T[P], AggregateMischaracterize[P]>
  }




  export type MischaracterizeGroupByArgs = {
    where?: mischaracterizeWhereInput
    orderBy?: Enumerable<mischaracterizeOrderByWithAggregationInput>
    by: Array<MischaracterizeScalarFieldEnum>
    having?: mischaracterizeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MischaracterizeCountAggregateInputType | true
    _min?: MischaracterizeMinAggregateInputType
    _max?: MischaracterizeMaxAggregateInputType
  }


  export type MischaracterizeGroupByOutputType = {
    id: string
    equipment_id: string
    destination: string | null
    resourcesComplement: string
    state: string
    long: string
    lat: string
    updateDate: Date
    _count: MischaracterizeCountAggregateOutputType | null
    _min: MischaracterizeMinAggregateOutputType | null
    _max: MischaracterizeMaxAggregateOutputType | null
  }

  type GetMischaracterizeGroupByPayload<T extends MischaracterizeGroupByArgs> = PrismaPromise<
    Array<
      PickArray<MischaracterizeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MischaracterizeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MischaracterizeGroupByOutputType[P]>
            : GetScalarType<T[P], MischaracterizeGroupByOutputType[P]>
        }
      >
    >


  export type mischaracterizeSelect = {
    id?: boolean
    equipment_id?: boolean
    destination?: boolean
    resourcesComplement?: boolean
    state?: boolean
    long?: boolean
    lat?: boolean
    equipment?: boolean | EquipmentsArgs
    updateDate?: boolean
  }


  export type mischaracterizeInclude = {
    equipment?: boolean | EquipmentsArgs
  } 

  export type mischaracterizeGetPayload<S extends boolean | null | undefined | mischaracterizeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? mischaracterize :
    S extends undefined ? never :
    S extends { include: any } & (mischaracterizeArgs | mischaracterizeFindManyArgs)
    ? mischaracterize  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'equipment' ? EquipmentsGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (mischaracterizeArgs | mischaracterizeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'equipment' ? EquipmentsGetPayload<S['select'][P]> | null :  P extends keyof mischaracterize ? mischaracterize[P] : never
  } 
      : mischaracterize


  type mischaracterizeCountArgs = Merge<
    Omit<mischaracterizeFindManyArgs, 'select' | 'include'> & {
      select?: MischaracterizeCountAggregateInputType | true
    }
  >

  export interface mischaracterizeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Mischaracterize that matches the filter.
     * @param {mischaracterizeFindUniqueArgs} args - Arguments to find a Mischaracterize
     * @example
     * // Get one Mischaracterize
     * const mischaracterize = await prisma.mischaracterize.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends mischaracterizeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, mischaracterizeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'mischaracterize'> extends True ? Prisma__mischaracterizeClient<mischaracterizeGetPayload<T>> : Prisma__mischaracterizeClient<mischaracterizeGetPayload<T> | null, null>

    /**
     * Find one Mischaracterize that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {mischaracterizeFindUniqueOrThrowArgs} args - Arguments to find a Mischaracterize
     * @example
     * // Get one Mischaracterize
     * const mischaracterize = await prisma.mischaracterize.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends mischaracterizeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, mischaracterizeFindUniqueOrThrowArgs>
    ): Prisma__mischaracterizeClient<mischaracterizeGetPayload<T>>

    /**
     * Find the first Mischaracterize that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mischaracterizeFindFirstArgs} args - Arguments to find a Mischaracterize
     * @example
     * // Get one Mischaracterize
     * const mischaracterize = await prisma.mischaracterize.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends mischaracterizeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, mischaracterizeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'mischaracterize'> extends True ? Prisma__mischaracterizeClient<mischaracterizeGetPayload<T>> : Prisma__mischaracterizeClient<mischaracterizeGetPayload<T> | null, null>

    /**
     * Find the first Mischaracterize that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mischaracterizeFindFirstOrThrowArgs} args - Arguments to find a Mischaracterize
     * @example
     * // Get one Mischaracterize
     * const mischaracterize = await prisma.mischaracterize.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends mischaracterizeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, mischaracterizeFindFirstOrThrowArgs>
    ): Prisma__mischaracterizeClient<mischaracterizeGetPayload<T>>

    /**
     * Find zero or more Mischaracterizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mischaracterizeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mischaracterizes
     * const mischaracterizes = await prisma.mischaracterize.findMany()
     * 
     * // Get first 10 Mischaracterizes
     * const mischaracterizes = await prisma.mischaracterize.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mischaracterizeWithIdOnly = await prisma.mischaracterize.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends mischaracterizeFindManyArgs>(
      args?: SelectSubset<T, mischaracterizeFindManyArgs>
    ): PrismaPromise<Array<mischaracterizeGetPayload<T>>>

    /**
     * Create a Mischaracterize.
     * @param {mischaracterizeCreateArgs} args - Arguments to create a Mischaracterize.
     * @example
     * // Create one Mischaracterize
     * const Mischaracterize = await prisma.mischaracterize.create({
     *   data: {
     *     // ... data to create a Mischaracterize
     *   }
     * })
     * 
    **/
    create<T extends mischaracterizeCreateArgs>(
      args: SelectSubset<T, mischaracterizeCreateArgs>
    ): Prisma__mischaracterizeClient<mischaracterizeGetPayload<T>>

    /**
     * Create many Mischaracterizes.
     *     @param {mischaracterizeCreateManyArgs} args - Arguments to create many Mischaracterizes.
     *     @example
     *     // Create many Mischaracterizes
     *     const mischaracterize = await prisma.mischaracterize.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends mischaracterizeCreateManyArgs>(
      args?: SelectSubset<T, mischaracterizeCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Mischaracterize.
     * @param {mischaracterizeDeleteArgs} args - Arguments to delete one Mischaracterize.
     * @example
     * // Delete one Mischaracterize
     * const Mischaracterize = await prisma.mischaracterize.delete({
     *   where: {
     *     // ... filter to delete one Mischaracterize
     *   }
     * })
     * 
    **/
    delete<T extends mischaracterizeDeleteArgs>(
      args: SelectSubset<T, mischaracterizeDeleteArgs>
    ): Prisma__mischaracterizeClient<mischaracterizeGetPayload<T>>

    /**
     * Update one Mischaracterize.
     * @param {mischaracterizeUpdateArgs} args - Arguments to update one Mischaracterize.
     * @example
     * // Update one Mischaracterize
     * const mischaracterize = await prisma.mischaracterize.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends mischaracterizeUpdateArgs>(
      args: SelectSubset<T, mischaracterizeUpdateArgs>
    ): Prisma__mischaracterizeClient<mischaracterizeGetPayload<T>>

    /**
     * Delete zero or more Mischaracterizes.
     * @param {mischaracterizeDeleteManyArgs} args - Arguments to filter Mischaracterizes to delete.
     * @example
     * // Delete a few Mischaracterizes
     * const { count } = await prisma.mischaracterize.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends mischaracterizeDeleteManyArgs>(
      args?: SelectSubset<T, mischaracterizeDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mischaracterizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mischaracterizeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mischaracterizes
     * const mischaracterize = await prisma.mischaracterize.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends mischaracterizeUpdateManyArgs>(
      args: SelectSubset<T, mischaracterizeUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Mischaracterize.
     * @param {mischaracterizeUpsertArgs} args - Arguments to update or create a Mischaracterize.
     * @example
     * // Update or create a Mischaracterize
     * const mischaracterize = await prisma.mischaracterize.upsert({
     *   create: {
     *     // ... data to create a Mischaracterize
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mischaracterize we want to update
     *   }
     * })
    **/
    upsert<T extends mischaracterizeUpsertArgs>(
      args: SelectSubset<T, mischaracterizeUpsertArgs>
    ): Prisma__mischaracterizeClient<mischaracterizeGetPayload<T>>

    /**
     * Count the number of Mischaracterizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mischaracterizeCountArgs} args - Arguments to filter Mischaracterizes to count.
     * @example
     * // Count the number of Mischaracterizes
     * const count = await prisma.mischaracterize.count({
     *   where: {
     *     // ... the filter for the Mischaracterizes we want to count
     *   }
     * })
    **/
    count<T extends mischaracterizeCountArgs>(
      args?: Subset<T, mischaracterizeCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MischaracterizeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mischaracterize.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MischaracterizeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MischaracterizeAggregateArgs>(args: Subset<T, MischaracterizeAggregateArgs>): PrismaPromise<GetMischaracterizeAggregateType<T>>

    /**
     * Group by Mischaracterize.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MischaracterizeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MischaracterizeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MischaracterizeGroupByArgs['orderBy'] }
        : { orderBy?: MischaracterizeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MischaracterizeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMischaracterizeGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for mischaracterize.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__mischaracterizeClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    equipment<T extends EquipmentsArgs= {}>(args?: Subset<T, EquipmentsArgs>): Prisma__EquipmentsClient<EquipmentsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * mischaracterize base type for findUnique actions
   */
  export type mischaracterizeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
    /**
     * Filter, which mischaracterize to fetch.
     * 
    **/
    where: mischaracterizeWhereUniqueInput
  }

  /**
   * mischaracterize findUnique
   */
  export interface mischaracterizeFindUniqueArgs extends mischaracterizeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * mischaracterize findUniqueOrThrow
   */
  export type mischaracterizeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
    /**
     * Filter, which mischaracterize to fetch.
     * 
    **/
    where: mischaracterizeWhereUniqueInput
  }


  /**
   * mischaracterize base type for findFirst actions
   */
  export type mischaracterizeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
    /**
     * Filter, which mischaracterize to fetch.
     * 
    **/
    where?: mischaracterizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mischaracterizes to fetch.
     * 
    **/
    orderBy?: Enumerable<mischaracterizeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mischaracterizes.
     * 
    **/
    cursor?: mischaracterizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mischaracterizes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mischaracterizes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mischaracterizes.
     * 
    **/
    distinct?: Enumerable<MischaracterizeScalarFieldEnum>
  }

  /**
   * mischaracterize findFirst
   */
  export interface mischaracterizeFindFirstArgs extends mischaracterizeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * mischaracterize findFirstOrThrow
   */
  export type mischaracterizeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
    /**
     * Filter, which mischaracterize to fetch.
     * 
    **/
    where?: mischaracterizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mischaracterizes to fetch.
     * 
    **/
    orderBy?: Enumerable<mischaracterizeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mischaracterizes.
     * 
    **/
    cursor?: mischaracterizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mischaracterizes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mischaracterizes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mischaracterizes.
     * 
    **/
    distinct?: Enumerable<MischaracterizeScalarFieldEnum>
  }


  /**
   * mischaracterize findMany
   */
  export type mischaracterizeFindManyArgs = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
    /**
     * Filter, which mischaracterizes to fetch.
     * 
    **/
    where?: mischaracterizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mischaracterizes to fetch.
     * 
    **/
    orderBy?: Enumerable<mischaracterizeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing mischaracterizes.
     * 
    **/
    cursor?: mischaracterizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mischaracterizes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mischaracterizes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<MischaracterizeScalarFieldEnum>
  }


  /**
   * mischaracterize create
   */
  export type mischaracterizeCreateArgs = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
    /**
     * The data needed to create a mischaracterize.
     * 
    **/
    data: XOR<mischaracterizeCreateInput, mischaracterizeUncheckedCreateInput>
  }


  /**
   * mischaracterize createMany
   */
  export type mischaracterizeCreateManyArgs = {
    /**
     * The data used to create many mischaracterizes.
     * 
    **/
    data: Enumerable<mischaracterizeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * mischaracterize update
   */
  export type mischaracterizeUpdateArgs = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
    /**
     * The data needed to update a mischaracterize.
     * 
    **/
    data: XOR<mischaracterizeUpdateInput, mischaracterizeUncheckedUpdateInput>
    /**
     * Choose, which mischaracterize to update.
     * 
    **/
    where: mischaracterizeWhereUniqueInput
  }


  /**
   * mischaracterize updateMany
   */
  export type mischaracterizeUpdateManyArgs = {
    /**
     * The data used to update mischaracterizes.
     * 
    **/
    data: XOR<mischaracterizeUpdateManyMutationInput, mischaracterizeUncheckedUpdateManyInput>
    /**
     * Filter which mischaracterizes to update
     * 
    **/
    where?: mischaracterizeWhereInput
  }


  /**
   * mischaracterize upsert
   */
  export type mischaracterizeUpsertArgs = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
    /**
     * The filter to search for the mischaracterize to update in case it exists.
     * 
    **/
    where: mischaracterizeWhereUniqueInput
    /**
     * In case the mischaracterize found by the `where` argument doesn't exist, create a new mischaracterize with this data.
     * 
    **/
    create: XOR<mischaracterizeCreateInput, mischaracterizeUncheckedCreateInput>
    /**
     * In case the mischaracterize was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<mischaracterizeUpdateInput, mischaracterizeUncheckedUpdateInput>
  }


  /**
   * mischaracterize delete
   */
  export type mischaracterizeDeleteArgs = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
    /**
     * Filter which mischaracterize to delete.
     * 
    **/
    where: mischaracterizeWhereUniqueInput
  }


  /**
   * mischaracterize deleteMany
   */
  export type mischaracterizeDeleteManyArgs = {
    /**
     * Filter which mischaracterizes to delete
     * 
    **/
    where?: mischaracterizeWhereInput
  }


  /**
   * mischaracterize without action
   */
  export type mischaracterizeArgs = {
    /**
     * Select specific fields to fetch from the mischaracterize
     * 
    **/
    select?: mischaracterizeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: mischaracterizeInclude | null
  }



  /**
   * Model Imagens
   */


  export type AggregateImagens = {
    _count: ImagensCountAggregateOutputType | null
    _min: ImagensMinAggregateOutputType | null
    _max: ImagensMaxAggregateOutputType | null
  }

  export type ImagensMinAggregateOutputType = {
    id: string | null
    image: string | null
    typed: string | null
    equipment_id: string | null
  }

  export type ImagensMaxAggregateOutputType = {
    id: string | null
    image: string | null
    typed: string | null
    equipment_id: string | null
  }

  export type ImagensCountAggregateOutputType = {
    id: number
    image: number
    typed: number
    equipment_id: number
    _all: number
  }


  export type ImagensMinAggregateInputType = {
    id?: true
    image?: true
    typed?: true
    equipment_id?: true
  }

  export type ImagensMaxAggregateInputType = {
    id?: true
    image?: true
    typed?: true
    equipment_id?: true
  }

  export type ImagensCountAggregateInputType = {
    id?: true
    image?: true
    typed?: true
    equipment_id?: true
    _all?: true
  }

  export type ImagensAggregateArgs = {
    /**
     * Filter which Imagens to aggregate.
     * 
    **/
    where?: ImagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imagens to fetch.
     * 
    **/
    orderBy?: Enumerable<ImagensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ImagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imagens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imagens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Imagens
    **/
    _count?: true | ImagensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImagensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImagensMaxAggregateInputType
  }

  export type GetImagensAggregateType<T extends ImagensAggregateArgs> = {
        [P in keyof T & keyof AggregateImagens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImagens[P]>
      : GetScalarType<T[P], AggregateImagens[P]>
  }




  export type ImagensGroupByArgs = {
    where?: ImagensWhereInput
    orderBy?: Enumerable<ImagensOrderByWithAggregationInput>
    by: Array<ImagensScalarFieldEnum>
    having?: ImagensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImagensCountAggregateInputType | true
    _min?: ImagensMinAggregateInputType
    _max?: ImagensMaxAggregateInputType
  }


  export type ImagensGroupByOutputType = {
    id: string
    image: string
    typed: string
    equipment_id: string
    _count: ImagensCountAggregateOutputType | null
    _min: ImagensMinAggregateOutputType | null
    _max: ImagensMaxAggregateOutputType | null
  }

  type GetImagensGroupByPayload<T extends ImagensGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ImagensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImagensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImagensGroupByOutputType[P]>
            : GetScalarType<T[P], ImagensGroupByOutputType[P]>
        }
      >
    >


  export type ImagensSelect = {
    id?: boolean
    image?: boolean
    typed?: boolean
    equipment_id?: boolean
    equipment?: boolean | EquipmentsArgs
  }


  export type ImagensInclude = {
    equipment?: boolean | EquipmentsArgs
  } 

  export type ImagensGetPayload<S extends boolean | null | undefined | ImagensArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Imagens :
    S extends undefined ? never :
    S extends { include: any } & (ImagensArgs | ImagensFindManyArgs)
    ? Imagens  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'equipment' ? EquipmentsGetPayload<S['include'][P]> | null :  never
  } 
    : S extends { select: any } & (ImagensArgs | ImagensFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'equipment' ? EquipmentsGetPayload<S['select'][P]> | null :  P extends keyof Imagens ? Imagens[P] : never
  } 
      : Imagens


  type ImagensCountArgs = Merge<
    Omit<ImagensFindManyArgs, 'select' | 'include'> & {
      select?: ImagensCountAggregateInputType | true
    }
  >

  export interface ImagensDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Imagens that matches the filter.
     * @param {ImagensFindUniqueArgs} args - Arguments to find a Imagens
     * @example
     * // Get one Imagens
     * const imagens = await prisma.imagens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImagensFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ImagensFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Imagens'> extends True ? Prisma__ImagensClient<ImagensGetPayload<T>> : Prisma__ImagensClient<ImagensGetPayload<T> | null, null>

    /**
     * Find one Imagens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ImagensFindUniqueOrThrowArgs} args - Arguments to find a Imagens
     * @example
     * // Get one Imagens
     * const imagens = await prisma.imagens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImagensFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ImagensFindUniqueOrThrowArgs>
    ): Prisma__ImagensClient<ImagensGetPayload<T>>

    /**
     * Find the first Imagens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensFindFirstArgs} args - Arguments to find a Imagens
     * @example
     * // Get one Imagens
     * const imagens = await prisma.imagens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImagensFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ImagensFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Imagens'> extends True ? Prisma__ImagensClient<ImagensGetPayload<T>> : Prisma__ImagensClient<ImagensGetPayload<T> | null, null>

    /**
     * Find the first Imagens that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensFindFirstOrThrowArgs} args - Arguments to find a Imagens
     * @example
     * // Get one Imagens
     * const imagens = await prisma.imagens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImagensFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ImagensFindFirstOrThrowArgs>
    ): Prisma__ImagensClient<ImagensGetPayload<T>>

    /**
     * Find zero or more Imagens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Imagens
     * const imagens = await prisma.imagens.findMany()
     * 
     * // Get first 10 Imagens
     * const imagens = await prisma.imagens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imagensWithIdOnly = await prisma.imagens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImagensFindManyArgs>(
      args?: SelectSubset<T, ImagensFindManyArgs>
    ): PrismaPromise<Array<ImagensGetPayload<T>>>

    /**
     * Create a Imagens.
     * @param {ImagensCreateArgs} args - Arguments to create a Imagens.
     * @example
     * // Create one Imagens
     * const Imagens = await prisma.imagens.create({
     *   data: {
     *     // ... data to create a Imagens
     *   }
     * })
     * 
    **/
    create<T extends ImagensCreateArgs>(
      args: SelectSubset<T, ImagensCreateArgs>
    ): Prisma__ImagensClient<ImagensGetPayload<T>>

    /**
     * Create many Imagens.
     *     @param {ImagensCreateManyArgs} args - Arguments to create many Imagens.
     *     @example
     *     // Create many Imagens
     *     const imagens = await prisma.imagens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImagensCreateManyArgs>(
      args?: SelectSubset<T, ImagensCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Imagens.
     * @param {ImagensDeleteArgs} args - Arguments to delete one Imagens.
     * @example
     * // Delete one Imagens
     * const Imagens = await prisma.imagens.delete({
     *   where: {
     *     // ... filter to delete one Imagens
     *   }
     * })
     * 
    **/
    delete<T extends ImagensDeleteArgs>(
      args: SelectSubset<T, ImagensDeleteArgs>
    ): Prisma__ImagensClient<ImagensGetPayload<T>>

    /**
     * Update one Imagens.
     * @param {ImagensUpdateArgs} args - Arguments to update one Imagens.
     * @example
     * // Update one Imagens
     * const imagens = await prisma.imagens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImagensUpdateArgs>(
      args: SelectSubset<T, ImagensUpdateArgs>
    ): Prisma__ImagensClient<ImagensGetPayload<T>>

    /**
     * Delete zero or more Imagens.
     * @param {ImagensDeleteManyArgs} args - Arguments to filter Imagens to delete.
     * @example
     * // Delete a few Imagens
     * const { count } = await prisma.imagens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImagensDeleteManyArgs>(
      args?: SelectSubset<T, ImagensDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Imagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Imagens
     * const imagens = await prisma.imagens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImagensUpdateManyArgs>(
      args: SelectSubset<T, ImagensUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Imagens.
     * @param {ImagensUpsertArgs} args - Arguments to update or create a Imagens.
     * @example
     * // Update or create a Imagens
     * const imagens = await prisma.imagens.upsert({
     *   create: {
     *     // ... data to create a Imagens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Imagens we want to update
     *   }
     * })
    **/
    upsert<T extends ImagensUpsertArgs>(
      args: SelectSubset<T, ImagensUpsertArgs>
    ): Prisma__ImagensClient<ImagensGetPayload<T>>

    /**
     * Count the number of Imagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensCountArgs} args - Arguments to filter Imagens to count.
     * @example
     * // Count the number of Imagens
     * const count = await prisma.imagens.count({
     *   where: {
     *     // ... the filter for the Imagens we want to count
     *   }
     * })
    **/
    count<T extends ImagensCountArgs>(
      args?: Subset<T, ImagensCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Imagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagensAggregateArgs>(args: Subset<T, ImagensAggregateArgs>): PrismaPromise<GetImagensAggregateType<T>>

    /**
     * Group by Imagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImagensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImagensGroupByArgs['orderBy'] }
        : { orderBy?: ImagensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImagensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagensGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Imagens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ImagensClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    equipment<T extends EquipmentsArgs= {}>(args?: Subset<T, EquipmentsArgs>): Prisma__EquipmentsClient<EquipmentsGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Imagens base type for findUnique actions
   */
  export type ImagensFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
    /**
     * Filter, which Imagens to fetch.
     * 
    **/
    where: ImagensWhereUniqueInput
  }

  /**
   * Imagens findUnique
   */
  export interface ImagensFindUniqueArgs extends ImagensFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Imagens findUniqueOrThrow
   */
  export type ImagensFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
    /**
     * Filter, which Imagens to fetch.
     * 
    **/
    where: ImagensWhereUniqueInput
  }


  /**
   * Imagens base type for findFirst actions
   */
  export type ImagensFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
    /**
     * Filter, which Imagens to fetch.
     * 
    **/
    where?: ImagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imagens to fetch.
     * 
    **/
    orderBy?: Enumerable<ImagensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Imagens.
     * 
    **/
    cursor?: ImagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imagens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imagens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Imagens.
     * 
    **/
    distinct?: Enumerable<ImagensScalarFieldEnum>
  }

  /**
   * Imagens findFirst
   */
  export interface ImagensFindFirstArgs extends ImagensFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Imagens findFirstOrThrow
   */
  export type ImagensFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
    /**
     * Filter, which Imagens to fetch.
     * 
    **/
    where?: ImagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imagens to fetch.
     * 
    **/
    orderBy?: Enumerable<ImagensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Imagens.
     * 
    **/
    cursor?: ImagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imagens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imagens.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Imagens.
     * 
    **/
    distinct?: Enumerable<ImagensScalarFieldEnum>
  }


  /**
   * Imagens findMany
   */
  export type ImagensFindManyArgs = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
    /**
     * Filter, which Imagens to fetch.
     * 
    **/
    where?: ImagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imagens to fetch.
     * 
    **/
    orderBy?: Enumerable<ImagensOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Imagens.
     * 
    **/
    cursor?: ImagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imagens from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imagens.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ImagensScalarFieldEnum>
  }


  /**
   * Imagens create
   */
  export type ImagensCreateArgs = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
    /**
     * The data needed to create a Imagens.
     * 
    **/
    data: XOR<ImagensCreateInput, ImagensUncheckedCreateInput>
  }


  /**
   * Imagens createMany
   */
  export type ImagensCreateManyArgs = {
    /**
     * The data used to create many Imagens.
     * 
    **/
    data: Enumerable<ImagensCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Imagens update
   */
  export type ImagensUpdateArgs = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
    /**
     * The data needed to update a Imagens.
     * 
    **/
    data: XOR<ImagensUpdateInput, ImagensUncheckedUpdateInput>
    /**
     * Choose, which Imagens to update.
     * 
    **/
    where: ImagensWhereUniqueInput
  }


  /**
   * Imagens updateMany
   */
  export type ImagensUpdateManyArgs = {
    /**
     * The data used to update Imagens.
     * 
    **/
    data: XOR<ImagensUpdateManyMutationInput, ImagensUncheckedUpdateManyInput>
    /**
     * Filter which Imagens to update
     * 
    **/
    where?: ImagensWhereInput
  }


  /**
   * Imagens upsert
   */
  export type ImagensUpsertArgs = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
    /**
     * The filter to search for the Imagens to update in case it exists.
     * 
    **/
    where: ImagensWhereUniqueInput
    /**
     * In case the Imagens found by the `where` argument doesn't exist, create a new Imagens with this data.
     * 
    **/
    create: XOR<ImagensCreateInput, ImagensUncheckedCreateInput>
    /**
     * In case the Imagens was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ImagensUpdateInput, ImagensUncheckedUpdateInput>
  }


  /**
   * Imagens delete
   */
  export type ImagensDeleteArgs = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
    /**
     * Filter which Imagens to delete.
     * 
    **/
    where: ImagensWhereUniqueInput
  }


  /**
   * Imagens deleteMany
   */
  export type ImagensDeleteManyArgs = {
    /**
     * Filter which Imagens to delete
     * 
    **/
    where?: ImagensWhereInput
  }


  /**
   * Imagens without action
   */
  export type ImagensArgs = {
    /**
     * Select specific fields to fetch from the Imagens
     * 
    **/
    select?: ImagensSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ImagensInclude | null
  }



  /**
   * Model Category
   */


  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    type: string | null
    model: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    type: string | null
    model: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    type: number
    model: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    type?: true
    model?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    type?: true
    model?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    type?: true
    model?: true
    _all?: true
  }

  export type CategoryAggregateArgs = {
    /**
     * Filter which Category to aggregate.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs = {
    where?: CategoryWhereInput
    orderBy?: Enumerable<CategoryOrderByWithAggregationInput>
    by: Array<CategoryScalarFieldEnum>
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }


  export type CategoryGroupByOutputType = {
    id: string
    type: string
    model: string
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = PrismaPromise<
    Array<
      PickArray<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect = {
    id?: boolean
    type?: boolean
    model?: boolean
    Equipments?: boolean | CategoryEquipmentsArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  }


  export type CategoryInclude = {
    Equipments?: boolean | CategoryEquipmentsArgs
    _count?: boolean | CategoryCountOutputTypeArgs
  } 

  export type CategoryGetPayload<S extends boolean | null | undefined | CategoryArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Category :
    S extends undefined ? never :
    S extends { include: any } & (CategoryArgs | CategoryFindManyArgs)
    ? Category  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'Equipments' ? Array < EquipmentsGetPayload<S['include'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (CategoryArgs | CategoryFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'Equipments' ? Array < EquipmentsGetPayload<S['select'][P]>>  :
        P extends '_count' ? CategoryCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Category ? Category[P] : never
  } 
      : Category


  type CategoryCountArgs = Merge<
    Omit<CategoryFindManyArgs, 'select' | 'include'> & {
      select?: CategoryCountAggregateInputType | true
    }
  >

  export interface CategoryDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, CategoryFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, CategoryFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Category'> extends True ? Prisma__CategoryClient<CategoryGetPayload<T>> : Prisma__CategoryClient<CategoryGetPayload<T> | null, null>

    /**
     * Find the first Category that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs>(
      args?: SelectSubset<T, CategoryFindManyArgs>
    ): PrismaPromise<Array<CategoryGetPayload<T>>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs>(
      args: SelectSubset<T, CategoryCreateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs>(
      args?: SelectSubset<T, CategoryCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs>(
      args: SelectSubset<T, CategoryDeleteArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs>(
      args: SelectSubset<T, CategoryUpdateArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs>(
      args?: SelectSubset<T, CategoryDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs>(
      args: SelectSubset<T, CategoryUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs>(
      args: SelectSubset<T, CategoryUpsertArgs>
    ): Prisma__CategoryClient<CategoryGetPayload<T>>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CategoryClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    Equipments<T extends CategoryEquipmentsArgs= {}>(args?: Subset<T, CategoryEquipmentsArgs>): PrismaPromise<Array<EquipmentsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Category base type for findUnique actions
   */
  export type CategoryFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUnique
   */
  export interface CategoryFindUniqueArgs extends CategoryFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category base type for findFirst actions
   */
  export type CategoryFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }

  /**
   * Category findFirst
   */
  export interface CategoryFindFirstArgs extends CategoryFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Category to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     * 
    **/
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category findMany
   */
  export type CategoryFindManyArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter, which Categories to fetch.
     * 
    **/
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     * 
    **/
    orderBy?: Enumerable<CategoryOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     * 
    **/
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     * 
    **/
    skip?: number
    distinct?: Enumerable<CategoryScalarFieldEnum>
  }


  /**
   * Category create
   */
  export type CategoryCreateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to create a Category.
     * 
    **/
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }


  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs = {
    /**
     * The data used to create many Categories.
     * 
    **/
    data: Enumerable<CategoryCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Category update
   */
  export type CategoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The data needed to update a Category.
     * 
    **/
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs = {
    /**
     * The data used to update Categories.
     * 
    **/
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category upsert
   */
  export type CategoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * The filter to search for the Category to update in case it exists.
     * 
    **/
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     * 
    **/
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }


  /**
   * Category delete
   */
  export type CategoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
    /**
     * Filter which Category to delete.
     * 
    **/
    where: CategoryWhereUniqueInput
  }


  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs = {
    /**
     * Filter which Categories to delete
     * 
    **/
    where?: CategoryWhereInput
  }


  /**
   * Category.Equipments
   */
  export type CategoryEquipmentsArgs = {
    /**
     * Select specific fields to fetch from the Equipments
     * 
    **/
    select?: EquipmentsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EquipmentsInclude | null
    where?: EquipmentsWhereInput
    orderBy?: Enumerable<EquipmentsOrderByWithRelationInput>
    cursor?: EquipmentsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EquipmentsScalarFieldEnum>
  }


  /**
   * Category without action
   */
  export type CategoryArgs = {
    /**
     * Select specific fields to fetch from the Category
     * 
    **/
    select?: CategorySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: CategoryInclude | null
  }



  /**
   * Model Admin
   */


  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type AdminAggregateArgs = {
    /**
     * Filter which Admin to aggregate.
     * 
    **/
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs = {
    where?: AdminWhereInput
    orderBy?: Enumerable<AdminOrderByWithAggregationInput>
    by: Array<AdminScalarFieldEnum>
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }


  export type AdminGroupByOutputType = {
    id: string
    username: string
    password: string
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = PrismaPromise<
    Array<
      PickArray<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect = {
    id?: boolean
    username?: boolean
    password?: boolean
  }


  export type AdminGetPayload<S extends boolean | null | undefined | AdminArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Admin :
    S extends undefined ? never :
    S extends { include: any } & (AdminArgs | AdminFindManyArgs)
    ? Admin 
    : S extends { select: any } & (AdminArgs | AdminFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof Admin ? Admin[P] : never
  } 
      : Admin


  type AdminCountArgs = Merge<
    Omit<AdminFindManyArgs, 'select' | 'include'> & {
      select?: AdminCountAggregateInputType | true
    }
  >

  export interface AdminDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AdminFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Admin'> extends True ? Prisma__AdminClient<AdminGetPayload<T>> : Prisma__AdminClient<AdminGetPayload<T> | null, null>

    /**
     * Find one Admin that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AdminFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Admin'> extends True ? Prisma__AdminClient<AdminGetPayload<T>> : Prisma__AdminClient<AdminGetPayload<T> | null, null>

    /**
     * Find the first Admin that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs>(
      args?: SelectSubset<T, AdminFindManyArgs>
    ): PrismaPromise<Array<AdminGetPayload<T>>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs>(
      args: SelectSubset<T, AdminCreateArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Create many Admins.
     *     @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     *     @example
     *     // Create many Admins
     *     const admin = await prisma.admin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AdminCreateManyArgs>(
      args?: SelectSubset<T, AdminCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs>(
      args: SelectSubset<T, AdminDeleteArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs>(
      args: SelectSubset<T, AdminUpdateArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs>(
      args?: SelectSubset<T, AdminDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs>(
      args: SelectSubset<T, AdminUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs>(
      args: SelectSubset<T, AdminUpsertArgs>
    ): Prisma__AdminClient<AdminGetPayload<T>>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AdminClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Admin base type for findUnique actions
   */
  export type AdminFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     * 
    **/
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUnique
   */
  export interface AdminFindUniqueArgs extends AdminFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     * 
    **/
    where: AdminWhereUniqueInput
  }


  /**
   * Admin base type for findFirst actions
   */
  export type AdminFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     * 
    **/
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     * 
    **/
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     * 
    **/
    distinct?: Enumerable<AdminScalarFieldEnum>
  }

  /**
   * Admin findFirst
   */
  export interface AdminFindFirstArgs extends AdminFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Filter, which Admin to fetch.
     * 
    **/
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     * 
    **/
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     * 
    **/
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * Admin findMany
   */
  export type AdminFindManyArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Filter, which Admins to fetch.
     * 
    **/
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     * 
    **/
    orderBy?: Enumerable<AdminOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     * 
    **/
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     * 
    **/
    skip?: number
    distinct?: Enumerable<AdminScalarFieldEnum>
  }


  /**
   * Admin create
   */
  export type AdminCreateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * The data needed to create a Admin.
     * 
    **/
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }


  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs = {
    /**
     * The data used to create many Admins.
     * 
    **/
    data: Enumerable<AdminCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Admin update
   */
  export type AdminUpdateArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * The data needed to update a Admin.
     * 
    **/
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     * 
    **/
    where: AdminWhereUniqueInput
  }


  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs = {
    /**
     * The data used to update Admins.
     * 
    **/
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     * 
    **/
    where?: AdminWhereInput
  }


  /**
   * Admin upsert
   */
  export type AdminUpsertArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * The filter to search for the Admin to update in case it exists.
     * 
    **/
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     * 
    **/
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }


  /**
   * Admin delete
   */
  export type AdminDeleteArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
    /**
     * Filter which Admin to delete.
     * 
    **/
    where: AdminWhereUniqueInput
  }


  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs = {
    /**
     * Filter which Admins to delete
     * 
    **/
    where?: AdminWhereInput
  }


  /**
   * Admin without action
   */
  export type AdminArgs = {
    /**
     * Select specific fields to fetch from the Admin
     * 
    **/
    select?: AdminSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const AdminScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    type: 'type',
    model: 'model'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const EquipmentsScalarFieldEnum: {
    id: 'id',
    serial: 'serial',
    description: 'description',
    batch: 'batch',
    model: 'model',
    created_at: 'created_at'
  };

  export type EquipmentsScalarFieldEnum = (typeof EquipmentsScalarFieldEnum)[keyof typeof EquipmentsScalarFieldEnum]


  export const ImagensScalarFieldEnum: {
    id: 'id',
    image: 'image',
    typed: 'typed',
    equipment_id: 'equipment_id'
  };

  export type ImagensScalarFieldEnum = (typeof ImagensScalarFieldEnum)[keyof typeof ImagensScalarFieldEnum]


  export const MischaracterizeScalarFieldEnum: {
    id: 'id',
    equipment_id: 'equipment_id',
    destination: 'destination',
    resourcesComplement: 'resourcesComplement',
    state: 'state',
    long: 'long',
    lat: 'lat',
    updateDate: 'updateDate'
  };

  export type MischaracterizeScalarFieldEnum = (typeof MischaracterizeScalarFieldEnum)[keyof typeof MischaracterizeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  /**
   * Deep Input Types
   */


  export type EquipmentsWhereInput = {
    AND?: Enumerable<EquipmentsWhereInput>
    OR?: Enumerable<EquipmentsWhereInput>
    NOT?: Enumerable<EquipmentsWhereInput>
    id?: StringFilter | string
    serial?: StringFilter | string
    description?: StringFilter | string
    batch?: StringFilter | string
    model?: StringFilter | string
    Category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    mischaracterize?: MischaracterizeListRelationFilter
    Imagens?: ImagensListRelationFilter
    created_at?: DateTimeFilter | Date | string
  }

  export type EquipmentsOrderByWithRelationInput = {
    id?: SortOrder
    serial?: SortOrder
    description?: SortOrder
    batch?: SortOrder
    model?: SortOrder
    Category?: CategoryOrderByWithRelationInput
    mischaracterize?: mischaracterizeOrderByRelationAggregateInput
    Imagens?: ImagensOrderByRelationAggregateInput
    created_at?: SortOrder
  }

  export type EquipmentsWhereUniqueInput = {
    id?: string
  }

  export type EquipmentsOrderByWithAggregationInput = {
    id?: SortOrder
    serial?: SortOrder
    description?: SortOrder
    batch?: SortOrder
    model?: SortOrder
    created_at?: SortOrder
    _count?: EquipmentsCountOrderByAggregateInput
    _max?: EquipmentsMaxOrderByAggregateInput
    _min?: EquipmentsMinOrderByAggregateInput
  }

  export type EquipmentsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EquipmentsScalarWhereWithAggregatesInput>
    OR?: Enumerable<EquipmentsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EquipmentsScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    serial?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
    batch?: StringWithAggregatesFilter | string
    model?: StringWithAggregatesFilter | string
    created_at?: DateTimeWithAggregatesFilter | Date | string
  }

  export type mischaracterizeWhereInput = {
    AND?: Enumerable<mischaracterizeWhereInput>
    OR?: Enumerable<mischaracterizeWhereInput>
    NOT?: Enumerable<mischaracterizeWhereInput>
    id?: StringFilter | string
    equipment_id?: StringFilter | string
    destination?: StringNullableFilter | string | null
    resourcesComplement?: StringFilter | string
    state?: StringFilter | string
    long?: StringFilter | string
    lat?: StringFilter | string
    equipment?: XOR<EquipmentsRelationFilter, EquipmentsWhereInput> | null
    updateDate?: DateTimeFilter | Date | string
  }

  export type mischaracterizeOrderByWithRelationInput = {
    id?: SortOrder
    equipment_id?: SortOrder
    destination?: SortOrder
    resourcesComplement?: SortOrder
    state?: SortOrder
    long?: SortOrder
    lat?: SortOrder
    equipment?: EquipmentsOrderByWithRelationInput
    updateDate?: SortOrder
  }

  export type mischaracterizeWhereUniqueInput = {
    id?: string
  }

  export type mischaracterizeOrderByWithAggregationInput = {
    id?: SortOrder
    equipment_id?: SortOrder
    destination?: SortOrder
    resourcesComplement?: SortOrder
    state?: SortOrder
    long?: SortOrder
    lat?: SortOrder
    updateDate?: SortOrder
    _count?: mischaracterizeCountOrderByAggregateInput
    _max?: mischaracterizeMaxOrderByAggregateInput
    _min?: mischaracterizeMinOrderByAggregateInput
  }

  export type mischaracterizeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<mischaracterizeScalarWhereWithAggregatesInput>
    OR?: Enumerable<mischaracterizeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<mischaracterizeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    equipment_id?: StringWithAggregatesFilter | string
    destination?: StringNullableWithAggregatesFilter | string | null
    resourcesComplement?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    long?: StringWithAggregatesFilter | string
    lat?: StringWithAggregatesFilter | string
    updateDate?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ImagensWhereInput = {
    AND?: Enumerable<ImagensWhereInput>
    OR?: Enumerable<ImagensWhereInput>
    NOT?: Enumerable<ImagensWhereInput>
    id?: StringFilter | string
    image?: StringFilter | string
    typed?: StringFilter | string
    equipment_id?: StringFilter | string
    equipment?: XOR<EquipmentsRelationFilter, EquipmentsWhereInput> | null
  }

  export type ImagensOrderByWithRelationInput = {
    id?: SortOrder
    image?: SortOrder
    typed?: SortOrder
    equipment_id?: SortOrder
    equipment?: EquipmentsOrderByWithRelationInput
  }

  export type ImagensWhereUniqueInput = {
    id?: string
  }

  export type ImagensOrderByWithAggregationInput = {
    id?: SortOrder
    image?: SortOrder
    typed?: SortOrder
    equipment_id?: SortOrder
    _count?: ImagensCountOrderByAggregateInput
    _max?: ImagensMaxOrderByAggregateInput
    _min?: ImagensMinOrderByAggregateInput
  }

  export type ImagensScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ImagensScalarWhereWithAggregatesInput>
    OR?: Enumerable<ImagensScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ImagensScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    image?: StringWithAggregatesFilter | string
    typed?: StringWithAggregatesFilter | string
    equipment_id?: StringWithAggregatesFilter | string
  }

  export type CategoryWhereInput = {
    AND?: Enumerable<CategoryWhereInput>
    OR?: Enumerable<CategoryWhereInput>
    NOT?: Enumerable<CategoryWhereInput>
    id?: StringFilter | string
    type?: StringFilter | string
    model?: StringFilter | string
    Equipments?: EquipmentsListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    model?: SortOrder
    Equipments?: EquipmentsOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = {
    id?: string
  }

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    model?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    OR?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    NOT?: Enumerable<CategoryScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    model?: StringWithAggregatesFilter | string
  }

  export type AdminWhereInput = {
    AND?: Enumerable<AdminWhereInput>
    OR?: Enumerable<AdminWhereInput>
    NOT?: Enumerable<AdminWhereInput>
    id?: StringFilter | string
    username?: StringFilter | string
    password?: StringFilter | string
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminWhereUniqueInput = {
    id?: string
    username?: string
  }

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AdminScalarWhereWithAggregatesInput>
    OR?: Enumerable<AdminScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AdminScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    username?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
  }

  export type EquipmentsCreateInput = {
    id?: string
    serial: string
    description: string
    batch: string
    Category: CategoryCreateNestedOneWithoutEquipmentsInput
    mischaracterize?: mischaracterizeCreateNestedManyWithoutEquipmentInput
    Imagens?: ImagensCreateNestedManyWithoutEquipmentInput
    created_at?: Date | string
  }

  export type EquipmentsUncheckedCreateInput = {
    id?: string
    serial: string
    description: string
    batch: string
    model: string
    mischaracterize?: mischaracterizeUncheckedCreateNestedManyWithoutEquipmentInput
    Imagens?: ImagensUncheckedCreateNestedManyWithoutEquipmentInput
    created_at?: Date | string
  }

  export type EquipmentsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    Category?: CategoryUpdateOneRequiredWithoutEquipmentsNestedInput
    mischaracterize?: mischaracterizeUpdateManyWithoutEquipmentNestedInput
    Imagens?: ImagensUpdateManyWithoutEquipmentNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    mischaracterize?: mischaracterizeUncheckedUpdateManyWithoutEquipmentNestedInput
    Imagens?: ImagensUncheckedUpdateManyWithoutEquipmentNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentsCreateManyInput = {
    id?: string
    serial: string
    description: string
    batch: string
    model: string
    created_at?: Date | string
  }

  export type EquipmentsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mischaracterizeCreateInput = {
    id?: string
    destination?: string | null
    resourcesComplement: string
    state: string
    long: string
    lat: string
    equipment?: EquipmentsCreateNestedOneWithoutMischaracterizeInput
    updateDate: Date | string
  }

  export type mischaracterizeUncheckedCreateInput = {
    id?: string
    equipment_id: string
    destination?: string | null
    resourcesComplement: string
    state: string
    long: string
    lat: string
    updateDate: Date | string
  }

  export type mischaracterizeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    destination?: NullableStringFieldUpdateOperationsInput | string | null
    resourcesComplement?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    long?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    equipment?: EquipmentsUpdateOneWithoutMischaracterizeNestedInput
    updateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mischaracterizeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipment_id?: StringFieldUpdateOperationsInput | string
    destination?: NullableStringFieldUpdateOperationsInput | string | null
    resourcesComplement?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    long?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    updateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mischaracterizeCreateManyInput = {
    id?: string
    equipment_id: string
    destination?: string | null
    resourcesComplement: string
    state: string
    long: string
    lat: string
    updateDate: Date | string
  }

  export type mischaracterizeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    destination?: NullableStringFieldUpdateOperationsInput | string | null
    resourcesComplement?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    long?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    updateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mischaracterizeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    equipment_id?: StringFieldUpdateOperationsInput | string
    destination?: NullableStringFieldUpdateOperationsInput | string | null
    resourcesComplement?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    long?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    updateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImagensCreateInput = {
    id?: string
    image: string
    typed: string
    equipment?: EquipmentsCreateNestedOneWithoutImagensInput
  }

  export type ImagensUncheckedCreateInput = {
    id?: string
    image: string
    typed: string
    equipment_id: string
  }

  export type ImagensUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    typed?: StringFieldUpdateOperationsInput | string
    equipment?: EquipmentsUpdateOneWithoutImagensNestedInput
  }

  export type ImagensUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    typed?: StringFieldUpdateOperationsInput | string
    equipment_id?: StringFieldUpdateOperationsInput | string
  }

  export type ImagensCreateManyInput = {
    id?: string
    image: string
    typed: string
    equipment_id: string
  }

  export type ImagensUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    typed?: StringFieldUpdateOperationsInput | string
  }

  export type ImagensUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    typed?: StringFieldUpdateOperationsInput | string
    equipment_id?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    id?: string
    type: string
    model: string
    Equipments?: EquipmentsCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    type: string
    model: string
    Equipments?: EquipmentsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    Equipments?: EquipmentsUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    Equipments?: EquipmentsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    type: string
    model: string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateInput = {
    id?: string
    username: string
    password: string
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    username: string
    password: string
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminCreateManyInput = {
    id?: string
    username: string
    password: string
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type MischaracterizeListRelationFilter = {
    every?: mischaracterizeWhereInput
    some?: mischaracterizeWhereInput
    none?: mischaracterizeWhereInput
  }

  export type ImagensListRelationFilter = {
    every?: ImagensWhereInput
    some?: ImagensWhereInput
    none?: ImagensWhereInput
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type mischaracterizeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImagensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EquipmentsCountOrderByAggregateInput = {
    id?: SortOrder
    serial?: SortOrder
    description?: SortOrder
    batch?: SortOrder
    model?: SortOrder
    created_at?: SortOrder
  }

  export type EquipmentsMaxOrderByAggregateInput = {
    id?: SortOrder
    serial?: SortOrder
    description?: SortOrder
    batch?: SortOrder
    model?: SortOrder
    created_at?: SortOrder
  }

  export type EquipmentsMinOrderByAggregateInput = {
    id?: SortOrder
    serial?: SortOrder
    description?: SortOrder
    batch?: SortOrder
    model?: SortOrder
    created_at?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type EquipmentsRelationFilter = {
    is?: EquipmentsWhereInput | null
    isNot?: EquipmentsWhereInput | null
  }

  export type mischaracterizeCountOrderByAggregateInput = {
    id?: SortOrder
    equipment_id?: SortOrder
    destination?: SortOrder
    resourcesComplement?: SortOrder
    state?: SortOrder
    long?: SortOrder
    lat?: SortOrder
    updateDate?: SortOrder
  }

  export type mischaracterizeMaxOrderByAggregateInput = {
    id?: SortOrder
    equipment_id?: SortOrder
    destination?: SortOrder
    resourcesComplement?: SortOrder
    state?: SortOrder
    long?: SortOrder
    lat?: SortOrder
    updateDate?: SortOrder
  }

  export type mischaracterizeMinOrderByAggregateInput = {
    id?: SortOrder
    equipment_id?: SortOrder
    destination?: SortOrder
    resourcesComplement?: SortOrder
    state?: SortOrder
    long?: SortOrder
    lat?: SortOrder
    updateDate?: SortOrder
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type ImagensCountOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    typed?: SortOrder
    equipment_id?: SortOrder
  }

  export type ImagensMaxOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    typed?: SortOrder
    equipment_id?: SortOrder
  }

  export type ImagensMinOrderByAggregateInput = {
    id?: SortOrder
    image?: SortOrder
    typed?: SortOrder
    equipment_id?: SortOrder
  }

  export type EquipmentsListRelationFilter = {
    every?: EquipmentsWhereInput
    some?: EquipmentsWhereInput
    none?: EquipmentsWhereInput
  }

  export type EquipmentsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    model?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    model?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    model?: SortOrder
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type CategoryCreateNestedOneWithoutEquipmentsInput = {
    create?: XOR<CategoryCreateWithoutEquipmentsInput, CategoryUncheckedCreateWithoutEquipmentsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutEquipmentsInput
    connect?: CategoryWhereUniqueInput
  }

  export type mischaracterizeCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<Enumerable<mischaracterizeCreateWithoutEquipmentInput>, Enumerable<mischaracterizeUncheckedCreateWithoutEquipmentInput>>
    connectOrCreate?: Enumerable<mischaracterizeCreateOrConnectWithoutEquipmentInput>
    createMany?: mischaracterizeCreateManyEquipmentInputEnvelope
    connect?: Enumerable<mischaracterizeWhereUniqueInput>
  }

  export type ImagensCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<Enumerable<ImagensCreateWithoutEquipmentInput>, Enumerable<ImagensUncheckedCreateWithoutEquipmentInput>>
    connectOrCreate?: Enumerable<ImagensCreateOrConnectWithoutEquipmentInput>
    createMany?: ImagensCreateManyEquipmentInputEnvelope
    connect?: Enumerable<ImagensWhereUniqueInput>
  }

  export type mischaracterizeUncheckedCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<Enumerable<mischaracterizeCreateWithoutEquipmentInput>, Enumerable<mischaracterizeUncheckedCreateWithoutEquipmentInput>>
    connectOrCreate?: Enumerable<mischaracterizeCreateOrConnectWithoutEquipmentInput>
    createMany?: mischaracterizeCreateManyEquipmentInputEnvelope
    connect?: Enumerable<mischaracterizeWhereUniqueInput>
  }

  export type ImagensUncheckedCreateNestedManyWithoutEquipmentInput = {
    create?: XOR<Enumerable<ImagensCreateWithoutEquipmentInput>, Enumerable<ImagensUncheckedCreateWithoutEquipmentInput>>
    connectOrCreate?: Enumerable<ImagensCreateOrConnectWithoutEquipmentInput>
    createMany?: ImagensCreateManyEquipmentInputEnvelope
    connect?: Enumerable<ImagensWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CategoryUpdateOneRequiredWithoutEquipmentsNestedInput = {
    create?: XOR<CategoryCreateWithoutEquipmentsInput, CategoryUncheckedCreateWithoutEquipmentsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutEquipmentsInput
    upsert?: CategoryUpsertWithoutEquipmentsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<CategoryUpdateWithoutEquipmentsInput, CategoryUncheckedUpdateWithoutEquipmentsInput>
  }

  export type mischaracterizeUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<Enumerable<mischaracterizeCreateWithoutEquipmentInput>, Enumerable<mischaracterizeUncheckedCreateWithoutEquipmentInput>>
    connectOrCreate?: Enumerable<mischaracterizeCreateOrConnectWithoutEquipmentInput>
    upsert?: Enumerable<mischaracterizeUpsertWithWhereUniqueWithoutEquipmentInput>
    createMany?: mischaracterizeCreateManyEquipmentInputEnvelope
    set?: Enumerable<mischaracterizeWhereUniqueInput>
    disconnect?: Enumerable<mischaracterizeWhereUniqueInput>
    delete?: Enumerable<mischaracterizeWhereUniqueInput>
    connect?: Enumerable<mischaracterizeWhereUniqueInput>
    update?: Enumerable<mischaracterizeUpdateWithWhereUniqueWithoutEquipmentInput>
    updateMany?: Enumerable<mischaracterizeUpdateManyWithWhereWithoutEquipmentInput>
    deleteMany?: Enumerable<mischaracterizeScalarWhereInput>
  }

  export type ImagensUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<Enumerable<ImagensCreateWithoutEquipmentInput>, Enumerable<ImagensUncheckedCreateWithoutEquipmentInput>>
    connectOrCreate?: Enumerable<ImagensCreateOrConnectWithoutEquipmentInput>
    upsert?: Enumerable<ImagensUpsertWithWhereUniqueWithoutEquipmentInput>
    createMany?: ImagensCreateManyEquipmentInputEnvelope
    set?: Enumerable<ImagensWhereUniqueInput>
    disconnect?: Enumerable<ImagensWhereUniqueInput>
    delete?: Enumerable<ImagensWhereUniqueInput>
    connect?: Enumerable<ImagensWhereUniqueInput>
    update?: Enumerable<ImagensUpdateWithWhereUniqueWithoutEquipmentInput>
    updateMany?: Enumerable<ImagensUpdateManyWithWhereWithoutEquipmentInput>
    deleteMany?: Enumerable<ImagensScalarWhereInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type mischaracterizeUncheckedUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<Enumerable<mischaracterizeCreateWithoutEquipmentInput>, Enumerable<mischaracterizeUncheckedCreateWithoutEquipmentInput>>
    connectOrCreate?: Enumerable<mischaracterizeCreateOrConnectWithoutEquipmentInput>
    upsert?: Enumerable<mischaracterizeUpsertWithWhereUniqueWithoutEquipmentInput>
    createMany?: mischaracterizeCreateManyEquipmentInputEnvelope
    set?: Enumerable<mischaracterizeWhereUniqueInput>
    disconnect?: Enumerable<mischaracterizeWhereUniqueInput>
    delete?: Enumerable<mischaracterizeWhereUniqueInput>
    connect?: Enumerable<mischaracterizeWhereUniqueInput>
    update?: Enumerable<mischaracterizeUpdateWithWhereUniqueWithoutEquipmentInput>
    updateMany?: Enumerable<mischaracterizeUpdateManyWithWhereWithoutEquipmentInput>
    deleteMany?: Enumerable<mischaracterizeScalarWhereInput>
  }

  export type ImagensUncheckedUpdateManyWithoutEquipmentNestedInput = {
    create?: XOR<Enumerable<ImagensCreateWithoutEquipmentInput>, Enumerable<ImagensUncheckedCreateWithoutEquipmentInput>>
    connectOrCreate?: Enumerable<ImagensCreateOrConnectWithoutEquipmentInput>
    upsert?: Enumerable<ImagensUpsertWithWhereUniqueWithoutEquipmentInput>
    createMany?: ImagensCreateManyEquipmentInputEnvelope
    set?: Enumerable<ImagensWhereUniqueInput>
    disconnect?: Enumerable<ImagensWhereUniqueInput>
    delete?: Enumerable<ImagensWhereUniqueInput>
    connect?: Enumerable<ImagensWhereUniqueInput>
    update?: Enumerable<ImagensUpdateWithWhereUniqueWithoutEquipmentInput>
    updateMany?: Enumerable<ImagensUpdateManyWithWhereWithoutEquipmentInput>
    deleteMany?: Enumerable<ImagensScalarWhereInput>
  }

  export type EquipmentsCreateNestedOneWithoutMischaracterizeInput = {
    create?: XOR<EquipmentsCreateWithoutMischaracterizeInput, EquipmentsUncheckedCreateWithoutMischaracterizeInput>
    connectOrCreate?: EquipmentsCreateOrConnectWithoutMischaracterizeInput
    connect?: EquipmentsWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EquipmentsUpdateOneWithoutMischaracterizeNestedInput = {
    create?: XOR<EquipmentsCreateWithoutMischaracterizeInput, EquipmentsUncheckedCreateWithoutMischaracterizeInput>
    connectOrCreate?: EquipmentsCreateOrConnectWithoutMischaracterizeInput
    upsert?: EquipmentsUpsertWithoutMischaracterizeInput
    disconnect?: boolean
    delete?: boolean
    connect?: EquipmentsWhereUniqueInput
    update?: XOR<EquipmentsUpdateWithoutMischaracterizeInput, EquipmentsUncheckedUpdateWithoutMischaracterizeInput>
  }

  export type EquipmentsCreateNestedOneWithoutImagensInput = {
    create?: XOR<EquipmentsCreateWithoutImagensInput, EquipmentsUncheckedCreateWithoutImagensInput>
    connectOrCreate?: EquipmentsCreateOrConnectWithoutImagensInput
    connect?: EquipmentsWhereUniqueInput
  }

  export type EquipmentsUpdateOneWithoutImagensNestedInput = {
    create?: XOR<EquipmentsCreateWithoutImagensInput, EquipmentsUncheckedCreateWithoutImagensInput>
    connectOrCreate?: EquipmentsCreateOrConnectWithoutImagensInput
    upsert?: EquipmentsUpsertWithoutImagensInput
    disconnect?: boolean
    delete?: boolean
    connect?: EquipmentsWhereUniqueInput
    update?: XOR<EquipmentsUpdateWithoutImagensInput, EquipmentsUncheckedUpdateWithoutImagensInput>
  }

  export type EquipmentsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<EquipmentsCreateWithoutCategoryInput>, Enumerable<EquipmentsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<EquipmentsCreateOrConnectWithoutCategoryInput>
    createMany?: EquipmentsCreateManyCategoryInputEnvelope
    connect?: Enumerable<EquipmentsWhereUniqueInput>
  }

  export type EquipmentsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<Enumerable<EquipmentsCreateWithoutCategoryInput>, Enumerable<EquipmentsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<EquipmentsCreateOrConnectWithoutCategoryInput>
    createMany?: EquipmentsCreateManyCategoryInputEnvelope
    connect?: Enumerable<EquipmentsWhereUniqueInput>
  }

  export type EquipmentsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<EquipmentsCreateWithoutCategoryInput>, Enumerable<EquipmentsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<EquipmentsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<EquipmentsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: EquipmentsCreateManyCategoryInputEnvelope
    set?: Enumerable<EquipmentsWhereUniqueInput>
    disconnect?: Enumerable<EquipmentsWhereUniqueInput>
    delete?: Enumerable<EquipmentsWhereUniqueInput>
    connect?: Enumerable<EquipmentsWhereUniqueInput>
    update?: Enumerable<EquipmentsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<EquipmentsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<EquipmentsScalarWhereInput>
  }

  export type EquipmentsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<Enumerable<EquipmentsCreateWithoutCategoryInput>, Enumerable<EquipmentsUncheckedCreateWithoutCategoryInput>>
    connectOrCreate?: Enumerable<EquipmentsCreateOrConnectWithoutCategoryInput>
    upsert?: Enumerable<EquipmentsUpsertWithWhereUniqueWithoutCategoryInput>
    createMany?: EquipmentsCreateManyCategoryInputEnvelope
    set?: Enumerable<EquipmentsWhereUniqueInput>
    disconnect?: Enumerable<EquipmentsWhereUniqueInput>
    delete?: Enumerable<EquipmentsWhereUniqueInput>
    connect?: Enumerable<EquipmentsWhereUniqueInput>
    update?: Enumerable<EquipmentsUpdateWithWhereUniqueWithoutCategoryInput>
    updateMany?: Enumerable<EquipmentsUpdateManyWithWhereWithoutCategoryInput>
    deleteMany?: Enumerable<EquipmentsScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type CategoryCreateWithoutEquipmentsInput = {
    id?: string
    type: string
    model: string
  }

  export type CategoryUncheckedCreateWithoutEquipmentsInput = {
    id?: string
    type: string
    model: string
  }

  export type CategoryCreateOrConnectWithoutEquipmentsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutEquipmentsInput, CategoryUncheckedCreateWithoutEquipmentsInput>
  }

  export type mischaracterizeCreateWithoutEquipmentInput = {
    id?: string
    destination?: string | null
    resourcesComplement: string
    state: string
    long: string
    lat: string
    updateDate: Date | string
  }

  export type mischaracterizeUncheckedCreateWithoutEquipmentInput = {
    id?: string
    destination?: string | null
    resourcesComplement: string
    state: string
    long: string
    lat: string
    updateDate: Date | string
  }

  export type mischaracterizeCreateOrConnectWithoutEquipmentInput = {
    where: mischaracterizeWhereUniqueInput
    create: XOR<mischaracterizeCreateWithoutEquipmentInput, mischaracterizeUncheckedCreateWithoutEquipmentInput>
  }

  export type mischaracterizeCreateManyEquipmentInputEnvelope = {
    data: Enumerable<mischaracterizeCreateManyEquipmentInput>
    skipDuplicates?: boolean
  }

  export type ImagensCreateWithoutEquipmentInput = {
    id?: string
    image: string
    typed: string
  }

  export type ImagensUncheckedCreateWithoutEquipmentInput = {
    id?: string
    image: string
    typed: string
  }

  export type ImagensCreateOrConnectWithoutEquipmentInput = {
    where: ImagensWhereUniqueInput
    create: XOR<ImagensCreateWithoutEquipmentInput, ImagensUncheckedCreateWithoutEquipmentInput>
  }

  export type ImagensCreateManyEquipmentInputEnvelope = {
    data: Enumerable<ImagensCreateManyEquipmentInput>
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutEquipmentsInput = {
    update: XOR<CategoryUpdateWithoutEquipmentsInput, CategoryUncheckedUpdateWithoutEquipmentsInput>
    create: XOR<CategoryCreateWithoutEquipmentsInput, CategoryUncheckedCreateWithoutEquipmentsInput>
  }

  export type CategoryUpdateWithoutEquipmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutEquipmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
  }

  export type mischaracterizeUpsertWithWhereUniqueWithoutEquipmentInput = {
    where: mischaracterizeWhereUniqueInput
    update: XOR<mischaracterizeUpdateWithoutEquipmentInput, mischaracterizeUncheckedUpdateWithoutEquipmentInput>
    create: XOR<mischaracterizeCreateWithoutEquipmentInput, mischaracterizeUncheckedCreateWithoutEquipmentInput>
  }

  export type mischaracterizeUpdateWithWhereUniqueWithoutEquipmentInput = {
    where: mischaracterizeWhereUniqueInput
    data: XOR<mischaracterizeUpdateWithoutEquipmentInput, mischaracterizeUncheckedUpdateWithoutEquipmentInput>
  }

  export type mischaracterizeUpdateManyWithWhereWithoutEquipmentInput = {
    where: mischaracterizeScalarWhereInput
    data: XOR<mischaracterizeUpdateManyMutationInput, mischaracterizeUncheckedUpdateManyWithoutMischaracterizeInput>
  }

  export type mischaracterizeScalarWhereInput = {
    AND?: Enumerable<mischaracterizeScalarWhereInput>
    OR?: Enumerable<mischaracterizeScalarWhereInput>
    NOT?: Enumerable<mischaracterizeScalarWhereInput>
    id?: StringFilter | string
    equipment_id?: StringFilter | string
    destination?: StringNullableFilter | string | null
    resourcesComplement?: StringFilter | string
    state?: StringFilter | string
    long?: StringFilter | string
    lat?: StringFilter | string
    updateDate?: DateTimeFilter | Date | string
  }

  export type ImagensUpsertWithWhereUniqueWithoutEquipmentInput = {
    where: ImagensWhereUniqueInput
    update: XOR<ImagensUpdateWithoutEquipmentInput, ImagensUncheckedUpdateWithoutEquipmentInput>
    create: XOR<ImagensCreateWithoutEquipmentInput, ImagensUncheckedCreateWithoutEquipmentInput>
  }

  export type ImagensUpdateWithWhereUniqueWithoutEquipmentInput = {
    where: ImagensWhereUniqueInput
    data: XOR<ImagensUpdateWithoutEquipmentInput, ImagensUncheckedUpdateWithoutEquipmentInput>
  }

  export type ImagensUpdateManyWithWhereWithoutEquipmentInput = {
    where: ImagensScalarWhereInput
    data: XOR<ImagensUpdateManyMutationInput, ImagensUncheckedUpdateManyWithoutImagensInput>
  }

  export type ImagensScalarWhereInput = {
    AND?: Enumerable<ImagensScalarWhereInput>
    OR?: Enumerable<ImagensScalarWhereInput>
    NOT?: Enumerable<ImagensScalarWhereInput>
    id?: StringFilter | string
    image?: StringFilter | string
    typed?: StringFilter | string
    equipment_id?: StringFilter | string
  }

  export type EquipmentsCreateWithoutMischaracterizeInput = {
    id?: string
    serial: string
    description: string
    batch: string
    Category: CategoryCreateNestedOneWithoutEquipmentsInput
    Imagens?: ImagensCreateNestedManyWithoutEquipmentInput
    created_at?: Date | string
  }

  export type EquipmentsUncheckedCreateWithoutMischaracterizeInput = {
    id?: string
    serial: string
    description: string
    batch: string
    model: string
    Imagens?: ImagensUncheckedCreateNestedManyWithoutEquipmentInput
    created_at?: Date | string
  }

  export type EquipmentsCreateOrConnectWithoutMischaracterizeInput = {
    where: EquipmentsWhereUniqueInput
    create: XOR<EquipmentsCreateWithoutMischaracterizeInput, EquipmentsUncheckedCreateWithoutMischaracterizeInput>
  }

  export type EquipmentsUpsertWithoutMischaracterizeInput = {
    update: XOR<EquipmentsUpdateWithoutMischaracterizeInput, EquipmentsUncheckedUpdateWithoutMischaracterizeInput>
    create: XOR<EquipmentsCreateWithoutMischaracterizeInput, EquipmentsUncheckedCreateWithoutMischaracterizeInput>
  }

  export type EquipmentsUpdateWithoutMischaracterizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    Category?: CategoryUpdateOneRequiredWithoutEquipmentsNestedInput
    Imagens?: ImagensUpdateManyWithoutEquipmentNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentsUncheckedUpdateWithoutMischaracterizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    Imagens?: ImagensUncheckedUpdateManyWithoutEquipmentNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentsCreateWithoutImagensInput = {
    id?: string
    serial: string
    description: string
    batch: string
    Category: CategoryCreateNestedOneWithoutEquipmentsInput
    mischaracterize?: mischaracterizeCreateNestedManyWithoutEquipmentInput
    created_at?: Date | string
  }

  export type EquipmentsUncheckedCreateWithoutImagensInput = {
    id?: string
    serial: string
    description: string
    batch: string
    model: string
    mischaracterize?: mischaracterizeUncheckedCreateNestedManyWithoutEquipmentInput
    created_at?: Date | string
  }

  export type EquipmentsCreateOrConnectWithoutImagensInput = {
    where: EquipmentsWhereUniqueInput
    create: XOR<EquipmentsCreateWithoutImagensInput, EquipmentsUncheckedCreateWithoutImagensInput>
  }

  export type EquipmentsUpsertWithoutImagensInput = {
    update: XOR<EquipmentsUpdateWithoutImagensInput, EquipmentsUncheckedUpdateWithoutImagensInput>
    create: XOR<EquipmentsCreateWithoutImagensInput, EquipmentsUncheckedCreateWithoutImagensInput>
  }

  export type EquipmentsUpdateWithoutImagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    Category?: CategoryUpdateOneRequiredWithoutEquipmentsNestedInput
    mischaracterize?: mischaracterizeUpdateManyWithoutEquipmentNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentsUncheckedUpdateWithoutImagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    mischaracterize?: mischaracterizeUncheckedUpdateManyWithoutEquipmentNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentsCreateWithoutCategoryInput = {
    id?: string
    serial: string
    description: string
    batch: string
    mischaracterize?: mischaracterizeCreateNestedManyWithoutEquipmentInput
    Imagens?: ImagensCreateNestedManyWithoutEquipmentInput
    created_at?: Date | string
  }

  export type EquipmentsUncheckedCreateWithoutCategoryInput = {
    id?: string
    serial: string
    description: string
    batch: string
    mischaracterize?: mischaracterizeUncheckedCreateNestedManyWithoutEquipmentInput
    Imagens?: ImagensUncheckedCreateNestedManyWithoutEquipmentInput
    created_at?: Date | string
  }

  export type EquipmentsCreateOrConnectWithoutCategoryInput = {
    where: EquipmentsWhereUniqueInput
    create: XOR<EquipmentsCreateWithoutCategoryInput, EquipmentsUncheckedCreateWithoutCategoryInput>
  }

  export type EquipmentsCreateManyCategoryInputEnvelope = {
    data: Enumerable<EquipmentsCreateManyCategoryInput>
    skipDuplicates?: boolean
  }

  export type EquipmentsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: EquipmentsWhereUniqueInput
    update: XOR<EquipmentsUpdateWithoutCategoryInput, EquipmentsUncheckedUpdateWithoutCategoryInput>
    create: XOR<EquipmentsCreateWithoutCategoryInput, EquipmentsUncheckedCreateWithoutCategoryInput>
  }

  export type EquipmentsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: EquipmentsWhereUniqueInput
    data: XOR<EquipmentsUpdateWithoutCategoryInput, EquipmentsUncheckedUpdateWithoutCategoryInput>
  }

  export type EquipmentsUpdateManyWithWhereWithoutCategoryInput = {
    where: EquipmentsScalarWhereInput
    data: XOR<EquipmentsUpdateManyMutationInput, EquipmentsUncheckedUpdateManyWithoutEquipmentsInput>
  }

  export type EquipmentsScalarWhereInput = {
    AND?: Enumerable<EquipmentsScalarWhereInput>
    OR?: Enumerable<EquipmentsScalarWhereInput>
    NOT?: Enumerable<EquipmentsScalarWhereInput>
    id?: StringFilter | string
    serial?: StringFilter | string
    description?: StringFilter | string
    batch?: StringFilter | string
    model?: StringFilter | string
    created_at?: DateTimeFilter | Date | string
  }

  export type mischaracterizeCreateManyEquipmentInput = {
    id?: string
    destination?: string | null
    resourcesComplement: string
    state: string
    long: string
    lat: string
    updateDate: Date | string
  }

  export type ImagensCreateManyEquipmentInput = {
    id?: string
    image: string
    typed: string
  }

  export type mischaracterizeUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    destination?: NullableStringFieldUpdateOperationsInput | string | null
    resourcesComplement?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    long?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    updateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mischaracterizeUncheckedUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    destination?: NullableStringFieldUpdateOperationsInput | string | null
    resourcesComplement?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    long?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    updateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mischaracterizeUncheckedUpdateManyWithoutMischaracterizeInput = {
    id?: StringFieldUpdateOperationsInput | string
    destination?: NullableStringFieldUpdateOperationsInput | string | null
    resourcesComplement?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    long?: StringFieldUpdateOperationsInput | string
    lat?: StringFieldUpdateOperationsInput | string
    updateDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImagensUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    typed?: StringFieldUpdateOperationsInput | string
  }

  export type ImagensUncheckedUpdateWithoutEquipmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    typed?: StringFieldUpdateOperationsInput | string
  }

  export type ImagensUncheckedUpdateManyWithoutImagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    typed?: StringFieldUpdateOperationsInput | string
  }

  export type EquipmentsCreateManyCategoryInput = {
    id?: string
    serial: string
    description: string
    batch: string
    created_at?: Date | string
  }

  export type EquipmentsUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    mischaracterize?: mischaracterizeUpdateManyWithoutEquipmentNestedInput
    Imagens?: ImagensUpdateManyWithoutEquipmentNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentsUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    mischaracterize?: mischaracterizeUncheckedUpdateManyWithoutEquipmentNestedInput
    Imagens?: ImagensUncheckedUpdateManyWithoutEquipmentNestedInput
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EquipmentsUncheckedUpdateManyWithoutEquipmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    serial?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    batch?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}